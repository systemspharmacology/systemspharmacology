@import "variables";

@mixin headline ($size, $lineheight, $color: $primary) {
  font-size: $size;
  line-height: $lineheight;
  color: $color;
}

@mixin logoimage ($imageurl, $width, $height) {
  background-image: url($imageurl);
  width: $width;
  height: $height;
  background-size: 100%;
  background-repeat: no-repeat;
}

@mixin flexcontainer () {
  display: flex;
  align-items: center;
  justify-content: center;
}

/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }
  
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
    + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin action-button($backgroundColor:$defaultButtonActionBackgroundColor, $hoverColor:$defaultButtonActionHoverColor, $textColor:$defaultButtonActionTextColor){
  background: $backgroundColor;
  text-transform:uppercase;
  width:176px;
  height:49px;
  text-align:center;
  line-height:49px;
  font-size:16px;
  color:$textColor;
  border-radius:3px;
  font-family:'Dosis';
  font-weight: 600;
  a {
    color: $textColor;
  }
  
  @include easeLinear;
  
  &:hover,
  &:focus,
  &:active {
    background:$hoverColor;
  }
}

@mixin tiny {
  @media only screen and (max-width: 359px) {
    @content;
  }
}

@mixin mobile {
  @media only screen and (max-width: 480px) {
    @content;
  }
}

@mixin small {
  @media only screen and (max-width: 640px) {
    @content;
  }
}

@mixin medium {
  @media only screen and (max-width: 768px) {
    @content;
  }
}

@mixin medium-2 {
  @media only screen and (max-width: 992px) {
    @content;
  }
}

@mixin large {
  @media only screen and (max-width: 1280px) {
    @content;
  }
}

@mixin large-2 {
  @media only screen and (max-width: 1440px) {
    @content;
  }
}

@mixin background-png-3x ($image) {
  background-repeat: no-repeat;
  background-image: url("#{$imagesPath}#{$image}.png");
  
  @media (-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) {
    background-image: url("#{$imagesPath}#{$image}@2x.png");
    background-size: 100%;
  }
  @media (-webkit-min-device-pixel-ratio: 2.5), (min-resolution: 216dpi) {
    background-image: url("#{$imagesPath}#{$image}@3x.png");
    background-size: 100%;
  }  
}

@mixin size ($w, $h) {
  width: $w; 
  height: $h;
}

@mixin border-radius ($r) {
  -webkit-border-radius: $r; 
  -moz-border-radius: $r;
  -o-border-radius: $r; 
  -ms-border-radius: $r; 
  border-radius: $r;
}

@mixin easeLinear ($time: 0.2s, $easing: linear, $props: all) {
  transition: $props $time $easing 0s;    
}

@mixin rotating ($time: 9s) {
  animation-name: ani-rotate; 
  animation-duration: $time; 
  animation-iteration-count: infinite;
  animation-timing-function: linear;
}

@keyframes ani-rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

@keyframes ani-thrust-line {
  0% { height: 3px; }
  20% { height: 15px; }
  100% { height: 3px; }
}